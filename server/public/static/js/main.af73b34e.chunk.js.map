{"version":3,"sources":["components/Welcome.js","components/Sidebar/User.js","components/Sidebar/UserList.js","components/Sidebar/Room.js","components/Sidebar/RoomList.js","components/Sidebar/Sidebar.js","components/Messages/Message.js","components/Messages/MessageList.js","components/Messages/CreateMessage.js","components/Messages/Messages.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","state","signup","localStorage","username","password","inputHandler","e","target","name","checkValidity","classList","remove","_this","setState","Object","defineProperty","value","add","setCustomValidity","submitHandler","preventDefault","props","trySignup","tryLogin","clickHandler","invalidHandler","react_default","a","createElement","className","this","loginErr","onSubmit","onInvalid","onChange","placeholder","type","minLength","maxLength","required","Fragment","onClick","React","Component","User","UserList","users","length","map","u","Sidebar_User","key","socketId","Room","changeRooms","id","roomId","RoomList","rooms","r","Sidebar_Room","Sidebar","htmlFor","Sidebar_RoomList","Sidebar_UserList","Message","concat","message","body","Date","dateCreated","toLocaleTimeString","replace","MessageList","messageList","scrollTop","scrollHeight","ref","messages","m","i","Messages_Message","CreateMessage","initialState","sendMessage","autoFocus","Messages","Messages_MessageList","Messages_CreateMessage","App","socket","emit","parseInt","_this2","socketio","connect","on","payload","loggedIn","disconnected","src_components_Welcome","components_Sidebar_Sidebar","components_Messages_Messages","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af73b34e.chunk.js","sourcesContent":["import React from 'react';\nimport './Welcome.css';\n\n\nclass Welcome extends React.Component {\n  state = {\n    signup: localStorage.username ? false : true,\n    username: localStorage.username || '',\n    password: '',\n  };\n\n  inputHandler = (e) => {\n    if (e.target.name === 'confirm-password') {\n      if (e.target.value !== this.state.password) {\n        e.target.classList.add('invalid');\n        e.target.setCustomValidity('Passwords must match')\n      } else {\n        e.target.setCustomValidity('');\n        e.target.classList.remove('invalid');\n      }\n      return;\n    }\n\n    if (e.target.checkValidity()) e.target.classList.remove('invalid');\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.state.signup\n     ? this.props.trySignup(this.state.username, this.state.password)\n     : this.props.tryLogin(this.state.username, this.state.password);\n  };\n\n  clickHandler = () => {\n    this.setState((state) => { return { signup: !state.signup } });\n  }\n\n  invalidHandler = (e) => {\n    e.target.classList.add('invalid');\n  };\n\n  render() {\n    return (\n      <section className=\"Welcome\">\n        <div className=\"modal\">\n          <h2>ch<span>app.</span></h2>\n          { this.props.state.loginErr\n            ? <span className=\"error\">{this.props.state.loginErr}</span>\n            : null\n          }\n          <p>Welcome to my chat app... chapp!</p>\n          <form onSubmit={this.submitHandler} onInvalid={this.invalidHandler}>\n            <input\n              onChange={this.inputHandler}\n              value={this.state.username}\n              placeholder=\"Username\"\n              type=\"text\"\n              minLength=\"2\"\n              maxLength=\"25\"\n              name=\"username\"\n              required\n            />\n            <input\n              onChange={this.inputHandler}\n              value={this.state.password}\n              placeholder=\"Password\"\n              type=\"password\"\n              minLength=\"6\"\n              maxLength=\"55\"\n              name=\"password\"\n              required\n            />\n            { this.state.signup \n              ? <React.Fragment>\n                  <input\n                    onChange={this.inputHandler}\n                    placeholder=\"Confirm Password\"\n                    type=\"password\"\n                    minLength=\"6\"\n                    maxLength=\"55\"\n                    name=\"confirm-password\"\n                    required\n                  />\n                  <button type=\"submit\">Create User</button>\n                  <span className=\"redirect\" onClick={this.clickHandler}>Already a member?</span>\n                </React.Fragment>\n              : <React.Fragment>\n                  <button type=\"submit\">Login</button>\n                  <span className=\"redirect\" onClick={this.clickHandler}>Sign Up</span>\n                </React.Fragment> \n            }\n          </form>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Welcome;\n","import React from 'react';\n\nconst User = (props) => (\n  <div className=\"User\">\n    {props.name}\n  </div>\n);\n\nexport default User\n","import React from 'react';\nimport User from './User';\n\nconst UserList = (props) => (\n  <section className=\"UserList\">\n    <h3>Connected Users - ({props.users.length})</h3>\n    <div className=\"users\">\n      {props.users.map((u) => (\n        <User key={u.socketId} name={u.name} />\n      ))}\n    </div>\n  </section>\n);\n\nexport default UserList;\n","import React from 'react';\n\nconst Room = (props) => (\n  <div className=\"Room\" onClick={props.changeRooms} id={props.roomId}>\n    {props.name}\n  </div>\n);\n\nexport default Room\n","import React from 'react';\nimport Room from './Room';\n\nconst RoomList = (props) => (\n  <section className=\"RoomList\">\n    <h3>Chat Rooms</h3>\n    <div className=\"rooms\">\n      {props.rooms.map((r) => (\n        <Room key={r.id} name={r.name} changeRooms={props.changeRooms} roomId={r.id} />\n      ))}\n    </div>\n  </section>\n);\n\nexport default RoomList;\n","import React from 'react';\nimport UserList from './UserList';\nimport RoomList from './RoomList';\nimport './Sidebar.css';\n\n\nconst Sidebar = (props) => (\n  <section className=\"Sidebar\">\n    <input type=\"checkbox\" id=\"sidebar-toggle\"/>\n\n    <label htmlFor=\"sidebar-toggle\" className=\"mobile-button\">\n      <div className=\"lines\"></div>\n      <div className=\"lines\"></div>\n      <div className=\"lines\"></div>\n    </label>\n\n    <div className=\"heading\">\n      <h2>ch<span>app.</span></h2>\n      <div className=\"subtitle\">A realtime chat application</div>\n    </div>\n    \n    <div className=\"sidebar-items\">\n      <RoomList rooms={props.rooms} changeRooms={props.changeRooms} />\n      <UserList users={props.users} />\n    </div>\n  </section>\n);\n\nexport default Sidebar;\n","import React from 'react';\n\nconst Message = (props) => (\n  <div className={`Message ${props.message.username === props.username ? \"me\" : \"\" }`}>\n    <div className=\"bubble\">\n      <p>{props.message.body}</p>\n      \n      <div className=\"meta\">\n        <span className=\"name\">{props.message.username}</span>\n        <span className=\"date\">\n          {new Date(props.message.dateCreated)\n            .toLocaleTimeString().replace(/([\\d]+:[\\d]{2})(:[\\d]{2})(.*)/, '$1$3')}\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Message;","import React from 'react';\nimport Message from './Message';\n\nclass MessageList extends React.Component {\n  componentDidUpdate() {\n    this.messageList.scrollTop = this.messageList.scrollHeight;\n  }\n\n  render() {\n    return (\n      <div className=\"MessageList\" ref={e => this.messageList = e}>\n        { this.props.messages.map((m, i) => (\n          m.roomId === this.props.roomId\n            ? <Message key={i} message={m} username={this.props.username} />\n            : null\n        ))}\n      </div>\n    );\n  };\n}\n\nexport default MessageList;\n","import React from 'react';\n\nclass CreateMessage extends React.Component {\n  static initialState = { message: '' };\n  state = CreateMessage.initialState;\n\n  inputHandler = (e) => {\n    this.setState({ message: e.target.value });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.props.sendMessage(this.state.message);\n    this.setState(CreateMessage.initialState);\n  };\n\n  render() {\n    return (\n      <div className=\"CreateMessage\">\n        <form onSubmit={this.submitHandler}>\n          <input \n            type=\"text\"\n            onChange={this.inputHandler}\n            placeholder=\"Enter message here...\"\n            value={this.state.message}\n            maxLength=\"2048\"\n            required\n            autoFocus\n          />\n        </form>\n      </div>\n    );\n  };\n}\n\nexport default CreateMessage;\n","import React from 'react';\nimport MessageList from './MessageList';\nimport CreateMessage from './CreateMessage';\nimport './Messages.css';\n\nconst Messages = (props) => (\n  <section className=\"Messages\">\n    <MessageList username={props.username} messages={props.messages} roomId={props.roomId} />\n    <CreateMessage sendMessage={props.sendMessage} />\n  </section>\n);\n\nexport default Messages;\n","import React, { Component } from 'react';\nimport socketio from 'socket.io-client';\nimport './App.css';\n\nimport Welcome from './components/Welcome';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Messages from './components/Messages/Messages';\n// import WebRTC from './components/WebRTC';\n\nclass App extends Component {\n  static initialState = {\n    socket: false,\n    loggedIn: false,\n    loginErr: 'Server is offline',\n    username: '',\n    users: [],\n    rooms: [],\n    messages: [],\n    roomId: 1,\n  };\n  state = App.initialState;\n\n  componentWillMount() {\n    const socket = socketio.connect('chapp.ml');\n\n    socket.on('connect', () => this.setState({ \n      socket,\n      loginErr: '',\n    }));\n\n    // ----- LOGIN -----\n    socket.on('usernameAccepted', (payload) => this.setState({\n      loggedIn: true,\n      username: payload.username,\n      messages: payload.messages,\n      rooms: payload.rooms,\n    }, () => localStorage.username = this.state.username));\n\n    socket.on('usersChanged', (users) => this.setState({ users }));\n\n    // ----- MESSAGES -----    \n    socket.on('messageCreated', (message) => this.setState((state) => ({ \n      messages: state.messages.concat(message),\n    })));\n\n    // ----- ERRORS -----\n    socket.on('usernameTaken', (payload) => this.setState({\n      loginErr: payload,\n    }));\n\n    socket.on('incorrectLogin', (payload) => this.setState({\n      loginErr: payload,\n    }));\n\n    socket.on('disconnect', () => this.setState(App.initialState));\n  };\n\n  tryLogin = (username, password) => {\n    if (!this.state.socket) return;\n    this.state.socket.emit('tryLogin', { username, password });\n  };\n\n  trySignup = (username, password) => {\n    if (!this.state.socket) return;\n    this.state.socket.emit('trySignup', { username, password });\n  };\n\n  sendMessage = (body) => {\n    if (!this.state.socket) return;\n    const message = { body, roomId: this.state.roomId };\n    this.state.socket.emit('createMessage', message);\n  };\n\n  changeRooms = (e) => {\n    this.setState({ roomId: parseInt(e.target.id) || 0 });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        { !this.state.loggedIn || this.state.socket.disconnected\n          ? <Welcome state={this.state} tryLogin={this.tryLogin} trySignup={this.trySignup} />\n          : (\n            <React.Fragment>\n              <Sidebar\n                users={this.state.users}\n                rooms={this.state.rooms}\n                changeRooms={this.changeRooms}\n              />\n              <Messages \n                username={this.state.username}\n                messages={this.state.messages}\n                sendMessage={this.sendMessage}\n                roomId={this.state.roomId}\n              />  \n            </React.Fragment>\n          )\n        }\n        {/* <WebRTC /> */}\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}